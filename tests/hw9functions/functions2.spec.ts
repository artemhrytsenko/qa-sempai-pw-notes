// –î–ó ‚Ññ9 —Ñ—É–Ω–∫—Ü—ñ/–º–∞—Å–∏–≤–∏

// 1Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–∞—Å–∏–≤—É
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ —î input –º–∞—Å–∏–≤–æ–º.
// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:
// console.log(isArray('QA DOJO')); // false
// console.log(isArray([1, 2, 4, 0])); // true
// function isArray (param) {
//   if param
// }

//not the best solution. Array.isArray() should work better
function isArray(param) {
  if (typeof param === "string") {
    const result = false;
    return result;
  }
  if (typeof param === "object") {
    const result = true;
    return result;
  }
}

console.log(isArray("QA DOJO")); // false
console.log(isArray([1, 2, 4, 0])); // true

// 2Ô∏è‚É£ –ö–ª–æ–Ω—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ–ø—ñ—ó –º–∞—Å–∏–≤—É.
// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:
// console.log(cloneArray([1, 2, 4, 0])); // [1, 2, 4, 0]
// console.log(cloneArray([1, 2, [4, 0]])); // [1, 2, [4, 0]]

//not the best solution.
function cloneArray(arr: Array<any>) {
  const newArr: Array<any> = [];
  for (let i = 0; i < arr.length; i++) {
    newArr.push(arr[i]);
  }
  return newArr;
}

console.log(cloneArray([1, 2, 4, 0, 6]));
console.log(cloneArray([1, 2, [4, 0]]));

// 3Ô∏è‚É£ –ü–µ—Ä—à—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–µ—Ä—à–∏—Ö n –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É.
// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:
// console.log(first([7, 9, 0, -2])); // 7
// console.log(first([7, 9, 0, -2], 3)); // [7, 9, 0]

//slice() can also be used
function first(arr: Array<any>, num?: number) {
  const newArray: Array<any> = [];
  if (num === undefined) {
    newArray.push(arr[0]);
    return newArray;
  } else {
    for (let i = 0; i < num; i++) {
      newArray.push(arr[i]);
    }
    return newArray;
  }
}

console.log(first([7, 9, 0, -2]));
console.log(first([7, 9, 0, -2], 3));

// –û—Å—Ç–∞–Ω–Ω—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –æ—Å—Ç–∞–Ω–Ω—ñ—Ö n –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É.
// –¢–µ—Å—Ç–æ–≤—ñ –¥–∞–Ω—ñ:
// console.log(last([7, 9, 0, -2])); // -2
// console.log(last([7, 9, 0, -2], 3)); // [9, 0, -2]

//slice() can also be used
function last(arr: Array<any>, num?: number) {
  const newArray: Array<any> = [];
  if (num === undefined) {
    const removedItem = arr.pop();
    newArray.push(removedItem);
    return newArray;
  } else {
    for (let i = 0; i < num; i++) {
      const removedItem = arr.pop();
      newArray.push(removedItem);
    }
    return newArray.reverse(); // is this correct?
  }
}

console.log(last([7, 9, 0, -2]));
console.log(last([7, 9, 0, -2], 3));

// –û–±‚Äô—î–¥–Ω–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –º–∞—Å–∏–≤—É
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —â–æ –æ–±'—î–¥–Ω—É—î –µ–ª–µ–º–µ–Ω—Ç–∏ –º–∞—Å–∏–≤—É —É —Å—Ç—Ä–æ–∫—É.   (–≥—É–≥–ª—ñ—Ç—å —è–∫ —Ü–µ –∑—Ä–æ–±–∏—Ç–∏)
// –ü—Ä–∏–∫–ª–∞–¥:
// myColor = ["Red", "Green", "White", "Black"];
// // "Red,Green,White,Black"
// // "Red+Green+White+Black"

//+ is hardcoded, variable might be added
function combineElements(arr: Array<any>, symbol: string) {
  const newArr = arr.join(`${symbol}`);
  // const newArr = arr.join();
  return console.log(newArr);
}

combineElements(["Red", "Green", "White", "Black"], "+");

// –î–µ—Ñ—ñ—Å–∏ –º—ñ–∂ –ø–∞—Ä–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏
// ‚úèÔ∏è –ü—Ä–æ–≥—Ä–∞–º–∞, —â–æ –¥–æ–¥–∞—î –¥–µ—Ñ—ñ—Å–∏ –º—ñ–∂ –ø–∞—Ä–Ω–∏–º–∏ —á–∏—Å–ª–∞–º–∏.   (–∑–∞–≤–¥–∞–Ω–Ω—è —ñ–∑ –∑—ñ—Ä–æ—á–∫–æ—é ‚≠êÔ∏è)
// –ü—Ä–∏–∫–ª–∞–¥:
// –í–≤—ñ–¥: 025468
// –í–∏–≤—ñ–¥: 0-254-6-8

function isEven(number) {
  let result = "";

  for (let i = 0; i < number.length; i++) {
    const currentNumber = number[i];
    const nextNumber = number[i + 1];

    result += currentNumber;

    if (currentNumber % 2 === 0 && nextNumber % 2 === 0) {
      result += "-";
    }
  }

  return result;
}
console.log(isEven("2234566"));

// 7Ô∏è‚É£ –°–æ—Ä—Ç—É–≤–∞–Ω–Ω—è –º–∞—Å–∏–≤—É
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É –¥–ª—è —Å–æ—Ä—Ç—É–≤–∞–Ω–Ω—è —á–∏—Å–µ–ª —É –º–∞—Å–∏–≤—ñ.   (–∑–∞–≤–¥–∞–Ω–Ω—è —ñ–∑ –∑—ñ—Ä–æ—á–∫–æ—é ‚≠êÔ∏è)
// –ü—Ä–∏–∫–ª–∞–¥:
// var arr1 = [-3, 8, 7, 6, 5, -4, 3, 2, 1];
// // –í–∏–≤—ñ–¥: -4,-3,1,2,3,5,6,7,8
// –¶–ò–ö–õ–ò

function sorting(arr) {
  const sortedArrey = arr;
  sortedArrey.sort(function (a, b) {
    return a - b;
  });

  console.log(sortedArrey);
}

sorting([1, 2, 3, 4, 5, 3, 2, 1, 5, 6, 3, 2]);

// –ß–∏—Å–ª–∞ –≤—ñ–¥ 1 –¥–æ 345
// ‚úèÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü–∏–∫–ª, —â–æ–±  —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –∑ —á–∏—Å–ª–∞–º–∏  –≤—ñ–¥ 1 –¥–æ 345.

function array345() {
  const finalNumber: number[] = [];
  for (let i = 1; i <= 345; i++) {
    finalNumber.push(i);
  }
  return finalNumber;
}

console.log(array345());

// –°—É–º–∞ —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 100
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –∑–Ω–∞–π–¥–µ —Å—É–º—É —á–∏—Å–µ–ª –≤—ñ–¥ 1 –¥–æ 100.

function addNumber() {
  let totalAmout = 0;
  for (let i = 1; i <= 100; i++) {
    totalAmout += i;
  }
  return totalAmout;
}

console.log(addNumber());

// üîü –ß–∏—Å–ª–∞ –≤—ñ–¥ 241 –¥–æ 1
// ‚úèÔ∏è –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Ü–∏–∫–ª, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –º–∞—Å–∏–≤ –∑ —á–∏—Å–ª–∞–º–∏ —É –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É –≤—ñ–¥ 241 –¥–æ 1.

function reverseArr() {
  let arr: number[] = [];
  for (let i = 1; i <= 241; i++) {
    arr.push(i);
  }
  return arr.reverse();
}

console.log(reverseArr());

// 1Ô∏è‚É£ 1Ô∏è‚É£ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ –∑ –¥–≤–æ—Ö
// ‚úèÔ∏è –ù–∞–ø–∏—à–∏ –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å –Ω–∞–π–±—ñ–ª—å—à–µ —Ü—ñ–ª–µ —á–∏—Å–ª–æ –∑ –¥–≤–æ—Ö. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π if –¥–ª—è –ø–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è.

// maxNumber(10, 20); // –í–∏–≤—ñ–¥: 20
// maxNumber(5, 5); // –í–∏–≤—ñ–¥: –û–±–∏–¥–≤–∞ —á–∏—Å–ª–∞ —Ä—ñ–≤–Ω—ñ
// maxNumber(-10, 0); // –í–∏–≤—ñ–¥: 0

function maxNumber(num1, num2) {
  if (num1 > num2) {
    return num1;
  } else if (num2 > num1) {
    return num2;
  } else {
    const result = "numbers are equal";
    return result;
  }
}

console.log(maxNumber(-10, 0));
