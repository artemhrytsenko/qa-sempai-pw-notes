import { test, expect } from "@playwright/test";
import exp from "constants";

// –ü–∞—Ä–Ω–µ —á–∏ –Ω–µ–ø–∞—Ä–Ω–µ —á–∏—Å–ª–æ
// üî¢ –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –≤–∏–∑–Ω–∞—á–∞—î, —á–∏ —á–∏—Å–ª–æ –ø–∞—Ä–Ω–µ –∞–±–æ –Ω–µ–ø–∞—Ä–Ω–µ.
// –í—Ö—ñ–¥: –ß–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 4)
// –í–∏—Ö—ñ–¥:
// "–ß–∏—Å–ª–æ –ø–∞—Ä–Ω–µ."
// "–ß–∏—Å–ª–æ –Ω–µ–ø–∞—Ä–Ω–µ."

function evenOrNotEven(num) {
  if (num % 2 === 0) {
    return "Even";
  } else {
    return "Not Even"; // add logic for string, because now the function works only with number
  }
}

//function evenOrNotEven can be change to use True or False in return. It makes easier to test this function.

test("even?", async () => {
  const result = evenOrNotEven(2);
  expect(result).toBe("Even");
});

test("not even?", async () => {
  const result = evenOrNotEven(1);
  expect(result).toBe("Not Even");
});

const result = evenOrNotEven(11);
console.log(result);

// 2Ô∏è‚É£ –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –∑–∞ —á–∞—Å–æ–º
// ‚è∞ –ó–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ —á–∞—Å—É –¥–æ–±–∏, –≤–∏–≤–µ–¥—ñ—Ç—å –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è: "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!", "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!" –∞–±–æ "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞!".
// –í—Ö—ñ–¥: –ì–æ–¥–∏–Ω–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 15)
// –í–∏—Ö—ñ–¥:
// –Ø–∫—â–æ –≥–æ–¥ < 12: "–î–æ–±—Ä–æ–≥–æ —Ä–∞–Ω–∫—É!"
// –Ø–∫—â–æ –≥–æ–¥ 12‚Äì18: "–î–æ–±—Ä–æ–≥–æ –¥–Ω—è!"
// –Ø–∫—â–æ –≥–æ–¥ > 18: "–î–æ–±—Ä–æ–≥–æ –≤–µ—á–æ—Ä–∞!"

function sayGreetings(time) {
  if (time >= 0 && time < 12) {
    return "Good morning";
  } else if (time >= 12 && time <= 18) {
    return "Good afternoon";
  } else if (time > 18 && time <= 24) {
    return "Good evening";
  } else {
    return "no such time";
  }
}

test("is morning - min value", async () => {
  const whatTime = sayGreetings(0);
  expect(whatTime).toBe("Good morning");
});

test("is morning - max value", async () => {
  const whatTime = sayGreetings(11.59);
  expect(whatTime).toBe("Good morning");
});

test("is afternoon - max value", async () => {
  const whatTime = sayGreetings(18);
  expect(whatTime).toBe("Good afternoon");
});

test("is afternoon - min value", async () => {
  const whatTime = sayGreetings(12);
  expect(whatTime).toBe("Good afternoon");
});

test("is evening - max value", async () => {
  const whatTime = sayGreetings(24);
  expect(whatTime).toBe("Good afternoon");
});

test("is evening - min value", async () => {
  const whatTime = sayGreetings(18.1);
  expect(whatTime).toBe("Good afternoon");
});

const greetings = sayGreetings(11);
console.log(greetings);

// 3Ô∏è‚É£ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –æ—Ü—ñ–Ω–∫–∏
// üìö –Ø–∫—â–æ –±–∞–ª >= 50 ‚Äî "–¢–µ—Å—Ç —Å–∫–ª–∞–¥–µ–Ω–æ". –Ø–∫—â–æ < 50 ‚Äî "–¢–µ—Å—Ç –Ω–µ —Å–∫–ª–∞–¥–µ–Ω–æ".

function examResults(point) {
  if (point < 50) {
    return "failed";
  } else {
    return "passed";
  }
}

test("passed - min value", async () => {
  const result = examResults(50);
  expect(result).toBe("passed");
});

test("failed - max value", async () => {
  const result = examResults(49);
  expect(result).toBe("failed");
});

const results = examResults(50);
console.log(results);

// 4Ô∏è‚É£ –í—ñ–∫ –¥–ª—è –≥–æ–ª–æ—Å—É–≤–∞–Ω–Ω—è
// üó≥ –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä—è—î, —á–∏ –º–æ–∂–Ω–∞ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏.
// –í—Ö—ñ–¥: –í—ñ–∫ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 17)
// –í–∏—Ö—ñ–¥:
// –Ø–∫—â–æ >= 18: "–í–∏ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏."
// –Ü–Ω–∞–∫—à–µ: "–í–∏ —â–µ –Ω–µ –º–æ–∂–µ—Ç–µ –≥–æ–ª–æ—Å—É–≤–∞—Ç–∏."

function canVote(age) {
  if (age >= 18) {
    return "can vote";
  } else {
    return "can't vote";
  }
}

test("min age for voting", async () => {
  const age = canVote(18);
  expect(age).toBe("can vote");
});

test("max age when voting isn't allowed", async () => {
  const age = canVote(18);
  expect(age).toBe("can't vote");
});

const age = canVote(6);
console.log(age);

// 5Ô∏è‚É£ –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è —á–∏—Å–µ–ª
// ‚öñÔ∏è –ü–æ—Ä—ñ–≤–Ω—è–π—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞: –≤–∏–≤–µ–¥—ñ—Ç—å –±—ñ–ª—å—à–µ, –∞–±–æ –ø–æ–≤—ñ–¥–æ–º—Ç–µ, —â–æ —á–∏—Å–ª–∞ —Ä—ñ–≤–Ω—ñ.
// –í—Ö—ñ–¥: –î–≤–∞ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 8 —ñ 10)
// –í–∏—Ö—ñ–¥:
// "–ü–µ—Ä—à–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ."
// "–î—Ä—É–≥–µ —á–∏—Å–ª–æ –±—ñ–ª—å—à–µ."
// "–ß–∏—Å–ª–∞ —Ä—ñ–≤–Ω—ñ."

function compareNumbers(num1, num2) {
  if (num1 > num2) {
    return num1;
  } else if (num2 > num1) {
    return num2;
  } else return "numbers are equal";
}

test("num1 > num2", async () => {
  const comparisonResult = compareNumbers(10, 9);
  expect(comparisonResult).toBe(10);
});

test("num2 > num1", async () => {
  const comparisonResult = compareNumbers(9, 10);
  expect(comparisonResult).toBe(10);
});

test("num1 = num2", async () => {
  const comparisonResult = compareNumbers(10, 10);
  expect(comparisonResult).toBe("numbers are equal");
});

const comparisonResult = compareNumbers(1122, 1122);
console.log(comparisonResult);

// 6Ô∏è‚É£ –î–æ—Ä–æ–≥–∞ —ñ —Å–≤—ñ—Ç–ª–æ—Ñ–æ—Ä
// üö¶ –Ø–∫—â–æ –∑–µ–ª–µ–Ω–∏–π ‚Äî –ø–µ—Ä–µ—Ö–æ–¥—å—Ç–µ. –ñ–æ–≤—Ç–∏–π ‚Äî –ø—ñ–¥–≥–æ—Ç—É–π—Ç–µ—Å—è. –ß–µ—Ä–≤–æ–Ω–∏–π ‚Äî –∑–∞—á–µ–∫–∞–π—Ç–µ.

function trafficLights(color) {
  if (color === "green") {
    return "You may walk.";
  } else if (color === "yellow") {
    return "Be ready.";
  } else if (color === "red") {
    return "Wait.";
  }
}

// else if (color === "red") {
//   return "Wait."};

//   or

// else return "Wait.";
test("green signal", async () => {
  const allowedAction = trafficLights("green");
  expect(allowedAction).toBe("You may walk.");
});

test("yellow signal", async () => {
  const allowedAction = trafficLights("yellow");
  expect(allowedAction).toBe("Be ready.");
});

test("red signal", async () => {
  const allowedAction = trafficLights("red");
  expect(allowedAction).toBe("Wait.");
});

const signalColor = trafficLights("red");
console.log(signalColor);

// 7Ô∏è‚É£ –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É —á–∏—Å–ª–∞
// ‚ûï‚ûñ –ù–∞–ø–∏—à—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É, —è–∫–∞ –≤–∏–∑–Ω–∞—á–∞—î, —á–∏ —á–∏—Å–ª–æ –¥–æ–¥–∞—Ç–Ω—î, –≤—ñ–¥‚Äô—î–º–Ω–µ –∞–±–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é.
// –í—Ö—ñ–¥: –ß–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, -5)
// –í–∏—Ö—ñ–¥:
// "–ß–∏—Å–ª–æ –¥–æ–¥–∞—Ç–Ω—î."
// "–ß–∏—Å–ª–æ –≤—ñ–¥‚Äô—î–º–Ω–µ."
// "–ß–∏—Å–ª–æ –¥–æ—Ä—ñ–≤–Ω—é—î –Ω—É–ª—é."

function returnsNumberType(num) {
  if (num > 0) {
    return "the numbe is positive";
  } else if (num === 0) {
    return "the number is 0";
  } else return "the number is negative";
}

test("number is positive", async () => {
  const numberResult = returnsNumberType(1);
  expect(numberResult).toBe("the number is positive");
});

test("number is negative", async () => {
  const numberResult = returnsNumberType(-1);
  expect(numberResult).toBe("the number is negative");
});

test("number is 0", async () => {
  const numberResult = returnsNumberType(0);
  expect(numberResult).toBe("the number is 0");
});

const numberType = returnsNumberType(2);
console.log(numberType);
